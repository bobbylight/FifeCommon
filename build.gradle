['java', 'checkstyle', 'maven', 'signing'].each { apply plugin: it }

group = 'com.fifesoft.rtext'
archivesBaseName = 'fife.common'

assert JavaVersion.current().isJava6Compatible()

dependencies {
	compile(
		[ 'com.apple:AppleJavaExtensions:1.4' ],
		[ 'com.github.insubstantial:laf-plugin:7.2.1' ],
		[ 'com.github.insubstantial:laf-widget:7.2.1' ],
		[ 'com.github.insubstantial:substance:7.2.1' ],
		[ 'com.github.insubstantial:trident:7.2.1' ])
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Regenerate local gradlew
task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}

checkstyle {
	toolVersion = '7.6'
	configFile = 'config/checkstyle/checkstyle.xml' as File
}

compileJava {
	sourceCompatibility javaVersion
	targetCompatibility javaVersion
	classpath += files("${projectDir.absolutePath}/extra")
	options.debug = true
	options.debugOptions.debugLevel = "source,vars,lines"
	// Most folks will compile with the latest JDK available, but official builds
	// use a Java 6 JDK.  Add this property to gradle.properties for boot classpath
	if (project.hasProperty("java6CompileBootClasspath")) {
		if (new File(java6CompileBootClasspath).isFile()) {
			println "Bootstrap classpath when compiling Java: ${java6CompileBootClasspath}"
			options.bootClasspath = java6CompileBootClasspath
		}
		else {
			println "Warning: Specified java6CompileBootClasspath does not exist: ${java6CompileBootClasspath}"
		}
	}
	else {
		println "Note: It is recommended to set your boot classpath to a Java 6 JDK, which you have not done."
	}
	options.compilerArgs << "-Xlint:deprecation" << '-Xlint:unchecked'
}

ext.sharedManifest = manifest {
	attributes(
		'Specification-Title': 'FifeCommon',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.ui',
		'Implementation-Version': version)

}
jar {
	from ("${projectDir}/extra") {
		include('com/apple/osxadapter/*.class')
	}
	manifest { from sharedManifest }
}

// Stuff to generate and upload Maven artifacts
task javadocJar (type: Jar, dependsOn: javadoc) {
	manifest { from sharedManifest }
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar (type: Jar) {
	manifest { from sharedManifest }
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives jar, javadocJar, sourceJar
}
signing {
	// Don't require signing for e.g. ./gradlew install
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}
repositories {
	mavenCentral()
}
uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			if (project.hasProperty('upload') && Boolean.parseBoolean(upload)) { // gradlew uploadArchives -Pupload=true
				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			}
			else {
				repository(url: 'file:///' + projectDir + '/../localMavenRepo')
			}
			pom {
				groupId = 'com.fifesoft.rtext'
				name = archivesBaseName
				project {
					parent {
						groupId 'org.sonatype.oss'
						artifactId 'oss-parent'
						version '7'
						relativePath ''
					}
					
					groupId 'com.fifesoft.rtext'
					artifactId archivesBaseName
					packaging 'jar'
					
					name archivesBaseName
					description 'Common UI components and utilities for Swing applications.'
					
					inceptionYear '2003'
					url 'http://www.fifesoft.com/rtext/'
					licenses {
						license {
							name 'Modified BSD License'
							url 'https://github.com/bobbylight/FifeCommon'
							distribution 'repo'
						}
					}
					
					scm {
						url 'https://github.com/bobbylight/FifeCommon'
						connection 'https://github.com/bobbylight/FifeCommon.git'
						developerConnection 'https://github.com/bobbylight/FifeCommon.git'
						if (!project.version.endsWith('-SNAPSHOT')) {
							tag project.version
						}
					}
					
					developers {
						developer {
							name 'Robert Futrell'
							url 'http://www.fifesoft.com'
							organization = 'Fifesoft' /* https://issues.gradle.org/browse/GRADLE-1200 */
							organizationUrl 'http://www.fifesoft.com/'
							roles {
								role 'architect'
								role 'developer'
							}
							timezone '0'
						}
					}
					
					// Ugh, have to do this for the "build" section
					// http://stackoverflow.com/questions/27975786/trouble-injecting-the-build-block-while-exporting-a-maven-pom-xml-file-from-grad
					withXml {
						def pluginNode = asNode().appendNode('build').appendNode('plugins').appendNode('plugin')
						pluginNode.appendNode('artifactId', 'maven-compiler-plugin')
						pluginNode.appendNode('version', '3.5.1')
						def executionNode = pluginNode.appendNode('executions').appendNode('execution')
						executionNode.appendNode('id', 'default-compile')
						executionNode.appendNode('configuration').appendNode('source', javaVersion).
						      parent().appendNode('target', javaVersion)
					}
				}
			}
		}
	}
}
